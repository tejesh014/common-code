// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function parseSuccess(response) {
  return response.json().then((function (result) {
                return Promise.resolve(/* Success */Block.__(0, [result]));
              }));
}

function parseUnprocessedError(response) {
  return response.json().then((function (result) {
                return Promise.resolve(/* UnprocessedEntity */Block.__(2, [result]));
              }));
}

function parseNotAcceptableError(response) {
  return response.json().then((function (result) {
                return Promise.resolve(/* NotAcceptableEntity */Block.__(3, [result]));
              }));
}

function parseDataConflictError(response) {
  return response.json().then((function (result) {
                return Promise.resolve(/* DataConflict */Block.__(7, [result]));
              }));
}

function execute(response) {
  var match = response.status;
  if (match >= 205) {
    if (match >= 303) {
      switch (match) {
        case 401 :
            return Promise.resolve(/* Unauthorized */Block.__(4, [({
              "title": "Unauthorized",
              "message": "You are not authenticated for the operation"
            })]));
        case 403 :
            return Promise.resolve(/* Forbidden */Block.__(5, [({
                "title": "Forbidden",
                "message": "You are not authorized for the operation"
              })]));
        case 406 :
            return parseNotAcceptableError(response);
        case 409 :
            return parseDataConflictError(response);
        case 402 :
        case 404 :
        case 405 :
        case 407 :
        case 408 :
        case 410 :
        case 411 :
        case 412 :
        case 413 :
        case 414 :
        case 415 :
        case 416 :
        case 417 :
        case 418 :
        case 419 :
        case 420 :
        case 421 :
            break;
        case 422 :
            return parseUnprocessedError(response);
        default:
          
      }
    } else if (match >= 301) {
      return parseSuccess(response);
    }
    
  } else if (match >= 202) {
    if (match >= 204) {
      return Promise.resolve(/* SuccessWithNoContent */Block.__(1, [({
              "title": "Success",
              "message": "The operation was successfully completed"
            })]));
    }
    
  } else if (match >= 200) {
    return parseSuccess(response);
  }
  return Promise.resolve(/* InternalServerError */Block.__(6, [({
              "title": "Internal Server Error",
              "message": "Something went wrong"
            })]));
}

var ResponseWrapper = {
  parseSuccess: parseSuccess,
  parseUnprocessedError: parseUnprocessedError,
  parseNotAcceptableError: parseNotAcceptableError,
  parseDataConflictError: parseDataConflictError,
  execute: execute
};

function ResponseConverter(ResponseConverterConfig, ErrorConverterConfig) {
  var execute = function (response) {
    if (typeof response !== "number") {
      switch (response.tag | 0) {
        case /* Success */0 :
        case /* SuccessWithNoContent */1 :
            return Caml_option.some(Promise.resolve(/* Ok */Block.__(0, [Curry._1(ResponseConverterConfig.execute, response[0])])));
        default:
          
      }
    }
    var error = Curry._1(ErrorConverterConfig.execute, response);
    if (error !== undefined) {
      return Caml_option.some(Promise.resolve(/* Error */Block.__(1, [Caml_option.valFromOption(error)])));
    }
    
  };
  return {
          execute: execute
        };
}

exports.ResponseWrapper = ResponseWrapper;
exports.ResponseConverter = ResponseConverter;
/* No side effect */
