// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Empty_List = Caml_exceptions.create("Exception.Empty_List");

var InternalServerError = Caml_exceptions.create("Exception.InternalServerError");

var NotAuthenticated = Caml_exceptions.create("Exception.NotAuthenticated");

var Forbidden = Caml_exceptions.create("Exception.Forbidden");

var UnprocessedEntity = Caml_exceptions.create("Exception.UnprocessedEntity");

var RequestTimedout = Caml_exceptions.create("Exception.RequestTimedout");

function fromString(exn) {
  switch (exn) {
    case "Exception.Empty_List" :
        return Empty_List;
    case "Exception.Forbidden" :
        return Forbidden;
    case "Exception.InternalServerError" :
        return InternalServerError;
    case "Exception.NotAuthenticated" :
        return NotAuthenticated;
    case "Exception.RequestTimedout" :
        return RequestTimedout;
    case "Exception.UnprocessedEntity" :
        return UnprocessedEntity;
    default:
      throw Caml_builtin_exceptions.not_found;
  }
}

function getErrorMessage(exn) {
  if (exn === Empty_List) {
    return "The list is empty";
  }
  if (exn === InternalServerError) {
    return "Something went wrong";
  }
  if (exn === NotAuthenticated) {
    return "Authentication Failure";
  }
  if (exn === Forbidden) {
    return "The requested resource is not available for the user to view";
  }
  if (exn === UnprocessedEntity) {
    return "Please check your form inputs and try again";
  }
  throw Caml_builtin_exceptions.not_found;
}

var ExceptionToErrorTextMap = {
  getErrorMessage: getErrorMessage
};

function getException(error) {
  return fromString(error[0]);
}

var PromiseToExceptionMap = {
  getException: getException
};

exports.Empty_List = Empty_List;
exports.InternalServerError = InternalServerError;
exports.NotAuthenticated = NotAuthenticated;
exports.Forbidden = Forbidden;
exports.UnprocessedEntity = UnprocessedEntity;
exports.RequestTimedout = RequestTimedout;
exports.fromString = fromString;
exports.ExceptionToErrorTextMap = ExceptionToErrorTextMap;
exports.PromiseToExceptionMap = PromiseToExceptionMap;
/* No side effect */
