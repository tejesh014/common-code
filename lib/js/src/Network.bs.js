// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/lib/js/src/Fetch.js");
var Exception = require("./Exception.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var ResponseHandler = require("./ResponseHandler.bs.js");

var NetworkRequestFailed = Caml_exceptions.create("Network.NetworkRequestFailed");

function getDefaultHeaders(param) {
  return {
          "Content-Type": "application/json",
          Accept: "application/json"
        };
}

var NetworkUtils = {
  getDefaultHeaders: getDefaultHeaders
};

function handlePromiseTimeout(promise, timeoutMs) {
  var timeoutPromise = new Promise((function (param, reject) {
          setTimeout((function (param) {
                  return reject(Exception.RequestTimedout);
                }), timeoutMs);
          
        }));
  return Promise.race($$Array.of_list(/* :: */[
                  promise,
                  /* :: */[
                    timeoutPromise,
                    /* [] */0
                  ]
                ]));
}

function promiseWithTimeout(promiseGenerator, timeoutMs, retryCount) {
  var finalPromise = handlePromiseTimeout(Curry._1(promiseGenerator, undefined), timeoutMs);
  return finalPromise.catch((function (error) {
                var match = Exception.PromiseToExceptionMap.getException(error);
                if (match === Exception.RequestTimedout && retryCount > 0) {
                  return promiseWithTimeout(promiseGenerator, timeoutMs, retryCount - 1 | 0);
                } else {
                  return finalPromise;
                }
              }));
}

function resolvePromiseWithTimeout(promise) {
  return promise.then(ResponseHandler.ResponseWrapper.execute).catch((function (error) {
                var match = Exception.PromiseToExceptionMap.getException(error);
                if (match === Exception.RequestTimedout) {
                  return Promise.resolve(/* TimedoutError */0);
                }
                throw NetworkRequestFailed;
              }));
}

function postRequest(requestUrl, payload, timeoutMsOpt, _unit) {
  var timeoutMs = timeoutMsOpt !== undefined ? timeoutMsOpt : 15000;
  var promise = fetch(requestUrl, Fetch.RequestInit.make(/* Post */2, {
              "Content-Type": "application/json",
              Accept: "application/json"
            }, Caml_option.some(payload), undefined, undefined, /* CORS */3, /* Include */2, undefined, undefined, undefined, undefined, undefined)(undefined));
  return resolvePromiseWithTimeout(handlePromiseTimeout(promise, timeoutMs));
}

function postRequestV2(requestUrl, payload, header, timeoutMsOpt, _unit) {
  var timeoutMs = timeoutMsOpt !== undefined ? timeoutMsOpt : 15000;
  var promise = fetch(requestUrl, Fetch.RequestInit.make(/* Post */2, Caml_option.some(Object.assign({
                      "Content-Type": "application/json",
                      Accept: "application/json",
                      "Access-Control-Allow-Origin": "*",
                      "Access-Control-Allow-Credentials": true
                    }, header)), Caml_option.some(payload), undefined, undefined, /* CORS */3, /* Include */2, undefined, undefined, undefined, undefined, undefined)(undefined));
  return resolvePromiseWithTimeout(handlePromiseTimeout(promise, timeoutMs));
}

function putRequest(requestUrl, payload, authToken, timeoutMsOpt, _unit) {
  var timeoutMs = timeoutMsOpt !== undefined ? timeoutMsOpt : 15000;
  var promise = fetch(requestUrl, Fetch.RequestInit.make(/* Put */3, {
              "Content-Type": "application/json",
              Accept: "application/json",
              DRIVER_AUTH_TOKEN: authToken
            }, Caml_option.some(payload), undefined, undefined, /* CORS */3, /* Include */2, undefined, undefined, undefined, undefined, undefined)(undefined));
  return resolvePromiseWithTimeout(handlePromiseTimeout(promise, timeoutMs));
}

function deleteRequest(requestUrl, timeoutMsOpt, __unit) {
  var timeoutMs = timeoutMsOpt !== undefined ? timeoutMsOpt : 15000;
  var promise = fetch(requestUrl, Fetch.RequestInit.make(/* Delete */4, {
              "Content-Type": "application/json",
              Accept: "application/json"
            }, undefined, undefined, undefined, /* CORS */3, /* Include */2, undefined, undefined, undefined, undefined, undefined)(undefined));
  return resolvePromiseWithTimeout(handlePromiseTimeout(promise, timeoutMs));
}

function getRequestV2(requestUrl, timeoutMsOpt, retryCountOpt, param) {
  var timeoutMs = timeoutMsOpt !== undefined ? timeoutMsOpt : 15000;
  var retryCount = retryCountOpt !== undefined ? retryCountOpt : 3;
  var promiseGenerator = function (param) {
    return fetch(requestUrl, Fetch.RequestInit.make(/* Get */0, {
                      "Content-Type": "application/json",
                      Accept: "application/json"
                    }, undefined, undefined, undefined, /* CORS */3, /* Include */2, undefined, undefined, undefined, undefined, undefined)(undefined));
  };
  return resolvePromiseWithTimeout(promiseWithTimeout(promiseGenerator, timeoutMs, retryCount));
}

function getRequestV3(requestUrl, authToken, timeoutMsOpt, retryCountOpt, param) {
  var timeoutMs = timeoutMsOpt !== undefined ? timeoutMsOpt : 15000;
  var retryCount = retryCountOpt !== undefined ? retryCountOpt : 3;
  var promiseGenerator = function (param) {
    return fetch(requestUrl, Fetch.RequestInit.make(/* Get */0, {
                      "Content-Type": "application/json",
                      DRIVER_AUTH_TOKEN: authToken
                    }, undefined, undefined, undefined, /* CORS */3, /* Include */2, undefined, undefined, undefined, undefined, undefined)(undefined));
  };
  return resolvePromiseWithTimeout(promiseWithTimeout(promiseGenerator, timeoutMs, retryCount));
}

function getRequestV4(requestUrl, authToken, timeoutMsOpt, retryCountOpt, param) {
  var timeoutMs = timeoutMsOpt !== undefined ? timeoutMsOpt : 15000;
  var retryCount = retryCountOpt !== undefined ? retryCountOpt : 3;
  var promiseGenerator = function (param) {
    return fetch(requestUrl, Fetch.RequestInit.make(/* Get */0, {
                      "Content-Type": "application/json",
                      "driver-auth-token": authToken
                    }, undefined, undefined, undefined, /* CORS */3, /* Include */2, undefined, undefined, undefined, undefined, undefined)(undefined));
  };
  return resolvePromiseWithTimeout(promiseWithTimeout(promiseGenerator, timeoutMs, retryCount));
}

var maxRetryCount = 3;

var maxTimeoutMs = 15000;

exports.maxRetryCount = maxRetryCount;
exports.maxTimeoutMs = maxTimeoutMs;
exports.NetworkRequestFailed = NetworkRequestFailed;
exports.NetworkUtils = NetworkUtils;
exports.handlePromiseTimeout = handlePromiseTimeout;
exports.promiseWithTimeout = promiseWithTimeout;
exports.resolvePromiseWithTimeout = resolvePromiseWithTimeout;
exports.postRequest = postRequest;
exports.postRequestV2 = postRequestV2;
exports.putRequest = putRequest;
exports.deleteRequest = deleteRequest;
exports.getRequestV2 = getRequestV2;
exports.getRequestV3 = getRequestV3;
exports.getRequestV4 = getRequestV4;
/* No side effect */
